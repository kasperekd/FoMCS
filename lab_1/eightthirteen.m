[y, Fs] = audioread('voice.wav'); % Замените 'voice.wav' на имя вашего файла

num_samples = length(y); % Количество отсчетов
duration = num_samples / Fs; % Длительность записи в секундах
calculated_Fs = num_samples / duration; % Вычисленная частота дискретизации
disp(['Частота дискретизации, определенная в Matlab: ', num2str(Fs), ' Гц']);
disp(['Вычисленная частота дискретизации: ', num2str(calculated_Fs), ' Гц']);

step = 10;

% Шаг 11: Прореживание массива y
y1 = downsample(y, step); % Оставляем каждый 10-й отсчет
zvuk = audioplayer(y1, Fs/step);
play(zvuk); % Воспроизводим звук
pause(length(y1)/ (Fs/step)); % Пауза для завершения воспроизведения

% Визуализация амплитуды сигнала
figure;
plot(y1);
title('Прореженный сигнал');
xlabel('Отсчеты');
ylabel('Амплитуда');
grid on;

% Шаг 12: Прямое дискретное преобразование Фурье
Y = fft(y); % Дискретное преобразование Фурье оригинального сигнала
Y1 = fft(y1); % Дискретное преобразование Фурье прореженного сигнала

% Определение оси частот
N = length(y);
N1 = length(y1);
f_axis = (0:N-1)*(Fs/N); % Ось частот для оригинального сигнала
f_axis1 = (0:N1-1)*(Fs/step/N1); % Ось частот для прореженного сигнала

% Визуализация амплитудного спектра
figure;
subplot(2, 1, 1);
plot(f_axis, abs(Y)/N);
title('Амплитудный спектр оригинального сигнала');
xlabel('Частота (Гц)');
ylabel('Амплитуда');
xlim([0 Fs/2]); % Ограничиваем ось частот до Nyquist частоты
grid on;

subplot(2, 1, 2);
plot(f_axis1, abs(Y1)/N1);
title('Амплитудный спектр прореженного сигнала');
xlabel('Частота (Гц)');
ylabel('Амплитуда');
xlim([0 Fs/20]); % Ограничиваем ось частот до Nyquist частоты для прореженного сигнала
grid on;

% Определение ширины спектра
spectrum_width = max(f_axis) - min(f_axis);
disp(['Ширина спектра оригинального сигнала: ', num2str(spectrum_width), ' Гц']);
spectrum_width1 = max(f_axis1) - min(f_axis1);
disp(['Ширина спектра прореженного сигнала: ', num2str(spectrum_width1), ' Гц']);
